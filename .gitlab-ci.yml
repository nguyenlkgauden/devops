stages:
  - build
  - deploy

variables:
  # from https://storage.googleapis.com/kubernetes-release/release/stable.txt
  K8S_STABLE_VERSION_URL: https://storage.googleapis.com/kubernetes-release/release/v1.10.4/bin/linux/amd64/kubectl
  VERSION: 1.0.0

default:
  tags:
    - ubuntu
  

build image:
  stage: build
  image: docker:stable
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  script:
    - docker info
    - docker build -t $CI_PROJECT_NAME:$VERSION-$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - docker tag $CI_PROJECT_NAME:$VERSION-$CI_COMMIT_SHORT_SHA nguyenlk/devops
    - docker push nguyenlk/devops:latest
deploy to DEV:
  stage: deploy
  image: google/cloud-sdk
  script:
    - echo "$SERVICE_ACCOUNT_KEY" | base64 -d > key.json
    - gcloud auth activate-service-account --key-file=key.json
    - gcloud config set project studydevop1
    - gcloud config set container/cluster bear
    - gcloud config set compute/zone asia-southeast1-a
    - gcloud container clusters get-credentials bear --zone asia-southeast1-a
    - kubectl get all
    - kubectl apply -f deploy.yml
    - kubectl apply -f service.yml
    # - sed -i "s/IMAGE_TAG/$IMG/g" deploy/deployment.yaml
    # - cat deploy/deployment.yaml
    #- kubectl apply -f deploy/deployment.yaml

# unit tests:
#   stage: test
#   script: # TODO: write a test script
#     - exit 0
#   # dependencies:
#   #   - build

# code quality:
#   stage: test
#   script: # TODO: write a test script
#     - exit 0

# container scaning:
#   stage: test
#   script: # TODO: write a test script
#     - exit 0

# deploy to Dev:
#   stage: deploy
#   environment:
#     name: Dev
#   image: alpine
#   script:
#     - docker run --name test myapp:latest
#   only:
#     - develop

# deploy to QA:
#   stage: deploy
#   environment:
#     name: Dev
#   image: alpine
#   script:
#     - apk add --no-cache curl
#     - curl -LO $K8S_STABLE_VERSION_URL
#     - chmod +x ./kubectl
#     - mv ./kubectl /usr/local/bin/kubectl
#     - mkdir ~/.kube
#     - cp $KUBECONFIG ~/.kube/config
#     - cat ~/.kube/config
#     - kubectl cluster-info
#     # If no error, connection to the cluster from the pipeline script is OK
#     # TODO: write a deploy script
#   # dependencies:
#   #   - test
#   only:
#     - qa

# deploy to UAT:
#   stage: deploy
#   environment:
#     name: Dev
#   image: alpine
#   script:
#     - apk add --no-cache curl
#     - curl -LO $K8S_STABLE_VERSION_URL
#     - chmod +x ./kubectl
#     - mv ./kubectl /usr/local/bin/kubectl
#     - mkdir ~/.kube
#     - cp $KUBECONFIG ~/.kube/config
#     - cat ~/.kube/config
#     - kubectl cluster-info
#     # If no error, connection to the cluster from the pipeline script is OK
#     # TODO: write a deploy script
#   # dependencies:
#   #   - test
#   only:
#     - release

# deploy to PROD:
#   stage: deploy
#   environment:
#     name: Dev
#   image: alpine
#   script:
#     - apk add --no-cache curl
#     - curl -LO $K8S_STABLE_VERSION_URL
#     - chmod +x ./kubectl
#     - mv ./kubectl /usr/local/bin/kubectl
#     - mkdir ~/.kube
#     - cp $KUBECONFIG ~/.kube/config
#     - cat ~/.kube/config
#     - kubectl cluster-info
#     # If no error, connection to the cluster from the pipeline script is OK
#     # TODO: write a deploy script
#   # dependencies:
#   #   - test
#   only:
#     - tags

